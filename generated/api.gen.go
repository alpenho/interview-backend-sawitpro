// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// Login defines model for Login.
type Login struct {
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
}

// ProfileDataResponse defines model for ProfileDataResponse.
type ProfileDataResponse struct {
	FullName    *string `json:"full_name,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
}

// Registration defines model for Registration.
type Registration struct {
	FullName    string `json:"full_name"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
}

// RegistrationResponse defines model for RegistrationResponse.
type RegistrationResponse struct {
	AccessToken *string `json:"access_token,omitempty"`
	FullName    *string `json:"full_name,omitempty"`
	Id          *int32  `json:"id,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = Login

// RegistrationJSONRequestBody defines body for Registration for application/json ContentType.
type RegistrationJSONRequestBody = Registration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login to the server
	// (POST /login)
	Login(ctx echo.Context) error
	// Getting detail profile
	// (GET /my-profile)
	GetProfile(ctx echo.Context) error
	// Sign up to the server
	// (POST /registration)
	Registration(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// Registration converts echo context to params.
func (w *ServerInterfaceWrapper) Registration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Registration(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/my-profile", wrapper.GetProfile)
	router.POST(baseURL+"/registration", wrapper.Registration)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVwW7UMBD9lWjgGJptyyk3KmhVBBJqizhUq8qbTBIXxzbjcdGqyr8jO9nshqatQFs4",
	"JY7tmTfvvZncQ2FaazRqdpDfgysabEV8/UBk6AKdNdph+GDJWCSWGLdbdE7UcYPXFiEHxyR1DV2XAuEP",
	"LwlLyK/Hg8t0c9CsbrFg6FL4ZGqpH8a2wrmfhsqZ4CnYxmi80b5dIT2ffXI63UaeQ/OFTCUVvhcsHq+7",
	"8krdaNHiX4J7kPUCa+mYBEuj/zjdixG1zfsMabvwH2dNFAU6d8PmO+pZsE/XKWOFlaFWMOQgNR8fwQhG",
	"asYaaY7eLgWHhSfJ68tg7R7NCQpCeue5CatVXJ1ugn/8dgVp3wghUr+7TdYwW+hCYKkrE+4rWeBQdF8A",
	"fD6/CqhZsgrLrw4puUS6k0Wg8w7JRa3h8GBxsAgnjUUtrIQcjuOnwDk3EWumxh4xjsMz8BrpPi8hH1oo",
	"aBmpj3eOFofhURjNqOMdYa2SRbyV3breaH2vh7fXhBXk8CrbDoNsmARZjD8KGwsv0RUkbW/YHkDifFS4",
	"8irU83ax2BuA6Rx6FIDXuxAGc6PjE1Ou90vGHIYwM5LKUKJGOTatxeQxwnEbgbRXKgXn21bQeiyATcIN",
	"Jg7pbvBy1q7f2H4mBWA1zsh/hjyMLZjkCCbYnwZzk3GGheFYUgY2vAtlBC8c/zsvnBpaybJEPWl9yK+n",
	"TX+97Ja7Cpwhs9R1UiILqZIN6VEE+n0+z7bhZIq/jPkmKWZq390PbioIBWOvw9OG3O/EmP0jPIf3P86P",
	"E1EmF71errfN6ItLWevE2we9Gb0V3l20lic1/BnyLFOmEKoJJumW3a8AAAD//1gGF9dgCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
